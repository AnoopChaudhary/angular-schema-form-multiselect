angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/multiselect/multiselect.html",'<div class="form-group {{form.htmlClass}} schema-form-multiselect" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" multiple="multiple" sf-multiple="form.multiple" ng-disabled="form.readonly" sf-changed="form" class="form-control {{form.fieldHtmlClass}}" schema-validate="form" ng-options="item.value as item.name group by item.group for item in form.titleMap" ng-required="form.required" name="{{form.key.slice(-1)[0]}}" multiselect-config="{{form.multiselectConfig}}"></select><div class="help-block" sf-message="form.description"></div></div>'),e.put("directives/decorators/bootstrap/multiselect/selectWithDefault.html",'<div class="form-group {{form.htmlClass}} schema-form-select" ng-class="{\'has-error\': form.disableErrorState !== true && hasError(), \'has-success\': form.disableSuccessState !== true && hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-disabled="form.readonly" sf-changed="form" class="form-control {{form.fieldHtmlClass}}" schema-validate="form" ng-options="item.value as item.name group by item.group for item in form.titleMap" ng-required="form.required" name="{{form.key.slice(-1)[0]}}"><option value="" disabled="" selected="" hidden="">{{form.selectDefault}}</option></select><div class="help-block" sf-message="form.description"></div></div>')}]),angular.module("schemaForm").directive("sfMultiple",["$http",function(e){var t={maxHeight:305,enableCaseInsensitiveFiltering:!0,inheritClass:!1,nSelectedText:"selected.",templates:{li:'<li class="multiSelectCheckbox"><a href="javascript:void(0);"><label></label></a></li>'}},l={};return{restrict:"A",require:["ngModel"],transclude:!0,scope:{ngModel:"="},link:function(e,s,o){return s.multiselect?(o.multiselectConfig?angular.extend(l,t,JSON.parse(o.multiselectConfig)):l=t,void e.$watch(o.ngIf,function(){console.log("init multiselect"),s.multiselect(l)})):void console.warn("bootstrap-multiselect not present.")}}}]),angular.module("schemaForm").directive("schemaValidate",["sfSelect",function(e){return{link:function(t,l,s){t.$on("$destroy",function(){e(t.form.key,t.model,null)})}}}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,l){var s=function(e,t,s){if("string"===t.type&&"multiple"===t.multiple&&t.items&&t.items["enum"]){var o=stdFormObj(e,t,s);return o.key=s.path,o.type="multiselect",o.titleMap||(o.titleMap=enumToTitleMap(t.items["enum"])),s.lookup[l.stringify(s.path)]=o,o}};e.defaults.string.unshift(s),t.addMapping("bootstrapDecorator","multiselect","directives/decorators/bootstrap/multiselect/multiselect.html"),t.createDirective("multiselect","directives/decorators/bootstrap/multiselect/multiselect.html")}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,l){var s=function(e,t,s){if("string"===t.type&&t["enum"]){var o=stdFormObj(e,t,s);return o.key=s.path,o.type="selectWithDefault",o.titleMap||(o.titleMap=enumToTitleMap(t["enum"])),s.lookup[l.stringify(s.path)]=o,o}};e.defaults.string.unshift(s),t.addMapping("bootstrapDecorator","selectWithDefault","directives/decorators/bootstrap/multiselect/selectWithDefault.html"),t.createDirective("selectWithDefault","directives/decorators/bootstrap/multiselect/selectWithDefault.html")}]);